配置防火墙，开启80端口、3306端口

	vi /etc/sysconfig/iptables #编辑防火墙配置文件
	# Firewall configuration written by system-config-firewall
	# Manual customization of this file is not recommended.
	*filter
	:INPUT ACCEPT [0:0]
	:FORWARD ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	-A INPUT -p icmp -j ACCEPT
	-A INPUT -i lo -j ACCEPT
	-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8082 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8083 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8084 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8085 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8090 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8091 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8092 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8093 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8094 -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 6379 -j ACCEPT
	-A INPUT -j REJECT --reject-with icmp-host-prohibited
	-A FORWARD -j REJECT --reject-with icmp-host-prohibited
	COMMIT
	:wq!  #保存退出
	service iptables restart #最后重启防火墙使配置生效

虚拟机文件共享

	注：确定是否安装gcc等
		yum -y install lrzsz
		yum install -y gcc gcc-c++ automake make kernel-devel kernel-headers

	上传：VMwareTools-10.0.5-3228253.tar.gz到虚拟机linux下
	
	减压：tar zxvf VMwareTools-10.0.5-3228253.tar.gz 
	
	cd vmware-tools-distrib/
	
	./vmware-install.pl (然后一直回车到结束)
	
安装mysql

	(http://dev.mysql.com/doc/refman/5.7/en/binary-installation.html)
	
	yum install -y libaio （需要libaio依赖）
	
	下载linux-mysql绿色包：http://dev.mysql.com/downloads/mysql/
	
	减压：tar zxvf mysql-5.7.14-linux-glibc2.5-x86_64.tar.gz 
	groupadd mysql
    useradd -r -g mysql -s /bin/false mysql
	mv mysql-5.7.14-linux-glibc2.5-x86_64 mysql
	
	cd mysql
	
	mkdir data
	
	chmod 750 data
	
	chown -R mysql .
	
	chgrp -R mysql .
	
	bin/mysqld --initialize --user=mysql (执行后会生成一个默认密码 在最后：root@localhost: p=Wke!skS5F4 其中p=Wke!skS5F4就是密码)
	
	bin/mysql_ssl_rsa_setup 
	
	chown -R root .
	
	chown -R mysql data
	
	bin/mysqld_safe --user=mysql &
	
	cp support-files/mysql.server /etc/init.d/mysql
	
	cd support-files/
	
	vi my-default.cnf
	（修改：
 basedir = /usr/local/mysql
 datadir = /usr/local/mysql/data
 port = 3306
	）
	
	cp my-default.cnf /etc/my.cnf
	
	vi /etc/profile
	(在最后面添加：export PATH=$PATH:/usr/local/mysql/bin)
	
	source /etc/profile
	
	service mysql start
	
	mysql -uroot -p (输入执行bin/mysqld --initialize --user=mysql生成的密码)
	
	SET PASSWORD = PASSWORD('Abcd4321');
	
	flush privileges;
	
	mysql安装完毕！(感兴趣的可以尝试源码安装，源码安装编译太慢了)
	
安装nginx
	
	安装一些依赖包
	yum install -y gcc gcc-c++  make zlib zlib-devel pcre pcre-devel  libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel openssl openssl-devel openldap openldap-devel nss_ldap openldap-clients openldap-servers  libmcrypt libmcrypt-devel  libXpm-devel
	
	yum install -y compat*
	
	yum install -y lrzsz apr* 
	
	yum install -y autoconf automake bison bzip2 bzip2* fontconfig cloog-ppl cpp curl curl-devel fontconfig-devel
	
	yum install -y freetype freetype* freetype-devel gcc gcc-c++ gtk+-devel gd gettext gettext-devel glibc kernel kernel-headers
	
	yum install -y keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng* libpng-devel libjpeg* 
	
	yum install -y libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* 
	
	yum install -y libX* libtiff libtiff* make mpfr ncurses* ntp openssl nasm nasm* openssl-devel patch pcre-devel perl php-common 
	
	yum install -y php-gd policycoreutils ppl telnet t1lib t1lib* wget zlib-devel
	
	（包的目录：/usr/local/src）
	make clean 清楚编译的文件  .o文件
	
	tar zxvf pcre-8.39.tar.gz
	
	cd pcre-8.39
	
	./configure --prefix=/usr/local/pcre
	
	make 
	
	make install
	
	cd ..
	
	tar zxxvf openssl-1.0.1t.tar.gz
	
	cd openssl-1.0.1t
	
	./config --prefix=/usr/local/openssl
	
	make
	
	make install
	
	vi /etc/profile
	
	export PATH=$PATH:/usr/local/openssl/bin
	
	source /etc/profile
	
	cd ..
	
	tar zxvf zlib-1.2.8.tar.gz 
	
	cd zlib-1.2.8
	
	./configure --prefix=/usr/local/zlib
	
	make
	
	make install
	
	cd ..
	
	groupadd www
	
	useradd -r -g www www -s /bin/false
	
	tar zxvf nginx-1.10.1.tar.gz
	
	cd nginx-1.10.1
	
	./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-openssl=/usr/local/src/openssl-1.0.1t --with-zlib=/usr/local/src/zlib-1.2.8 --with-pcre=/usr/local/src/pcre-8.39
	
	注：--with-openssl=/usr/local/src/openssl-1.0.1p --with-zlib=/usr/local/src/zlib-1.2.8 --with-pcre=/usr/local/src/pcre-8.36指向的是源码包解压的路径，而不是安装的路径，否则会报错
	
	make
	
	make install
	
	/usr/local/nginx/sbin/nginx #启动Nginx
	
	设置nginx开机启动
	vi /etc/rc.d/init.d/nginx #编辑启动文件添加下面内容
	
############################################################
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
#
# chkconfig: - 85 15
# description: Nginx is an HTTP(S) server, HTTP(S) reverse \
# proxy and IMAP/POP3 proxy server
# processname: nginx
# config: /etc/nginx/nginx.conf
# config: /usr/local/nginx/conf/nginx.conf
# pidfile: /usr/local/nginx/logs/nginx.pid
# Source function library.
. /etc/rc.d/init.d/functions
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0
nginx="/usr/local/nginx/sbin/nginx"
prog=$(basename $nginx)
NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"
[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx
lockfile=/var/lock/subsys/nginx
make_dirs() {
# make required directories
user=`$nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`
if [ -z "`grep $user /etc/passwd`" ]; then
useradd -M -s /bin/nologin $user
fi
options=`$nginx -V 2>&1 | grep 'configure arguments:'`
for opt in $options; do
if [ `echo $opt | grep '.*-temp-path'` ]; then
value=`echo $opt | cut -d "=" -f 2`
if [ ! -d "$value" ]; then
# echo "creating" $value
mkdir -p $value && chown -R $user $value
fi
fi
done
}
start() {
[ -x $nginx ] || exit 5
[ -f $NGINX_CONF_FILE ] || exit 6
make_dirs
echo -n $"Starting $prog: "
daemon $nginx -c $NGINX_CONF_FILE
retval=$?
echo
[ $retval -eq 0 ] && touch $lockfile
return $retval
}
stop() {
echo -n $"Stopping $prog: "
killproc $prog -QUIT
retval=$?
echo
[ $retval -eq 0 ] && rm -f $lockfile
return $retval
}
restart() {
#configtest || return $?
stop
sleep 1
start
}
reload() {
#configtest || return $?
echo -n $"Reloading $prog: "
killproc $nginx -HUP
RETVAL=$?
echo
}
force_reload() {
restart
}
configtest() {
$nginx -t -c $NGINX_CONF_FILE
}
rh_status() {
status $prog
}
rh_status_q() {
rh_status >/dev/null 2>&1
}
case "$1" in
start)
rh_status_q && exit 0
$1
;;
stop)
rh_status_q || exit 0
$1
;;
restart|configtest)
$1
;;
reload)
rh_status_q || exit 7
$1
;;
force-reload)
force_reload
;;
status)
rh_status
;;
condrestart|try-restart)
rh_status_q || exit 0
;;
*)
echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
exit 2
esac
############################################################

	chmod 775 /etc/rc.d/init.d/nginx  #赋予文件执行权限
	chkconfig nginx on #设置开机启动
	/etc/rc.d/init.d/nginx restart #重启
	
	(在浏览器输入linux的ip测试)
	
	nginx安装完毕！
	
安装php

	tar zxvf yasm-1.3.0.tar.gz
	
	cd yasm-1.3.0
	
	./configure
	
	make
	
	make install
	
	cd ..
	
	tar zxvf libmcrypt-2.5.8.tar.gz
	
	cd libmcrypt-2.5.8
	
	./configure
	
	make
	
	make install
	
	cd ..
	
	tar jxvf libvpx-1.4.0.tar.bz2
	
	cd libvpx-1.4.0
	
	./configure --prefix=/usr/local/libvpx --enable-shared --enable-vp9
	
	make
	
	make install
	
	cd ..
	
	tar zxvf tiff-4.0.5.tar.gz
	
	cd tiff-4.0.5
	
	./configure --prefix=/usr/local/tiff --enable-shared
	
	make
	
	make install
	
	cd ..
	
	tar zxvf libpng-1.6.24.tar.gz
	
	cd libpng-1.6.24
	
	./configure --prefix=/usr/local/libpng --enable-shared
	
	make
	
	make install
	
	cd ..
	
	tar zxvf freetype-2.6.tar.gz
	
	cd freetype-2.6
	
	./configure --prefix=/usr/local/freetype --enable-shared
	
	make
	
	make install
	
	cd ..
	
	tar zxvf jpegsrc.v9b.tar.gz
	
	cd jpeg-9b
	
	./configure --prefix=/usr/local/jpeg --enable-shared
	
	make
	
	make install
	
	cd ..
	
	tar zxvf libgd-2.2.3.tar.gz
	
	cd libgd-2.2.3
	
	./configure --prefix=/usr/local/libgd --enable-shared --with-jpeg=/usr/local/jpeg --with-png=/usr/local/libpng --with-freetype=/usr/local/freetype --with-zlib=/usr/local/zlib --with-fontconfig=/usr/local/freetype
	
	make
	
	make install
	
	cd ..
	
	tar zxvf php-7.0.11.tar.gz
	
	cd php-7.0.11
	
	export LD_LIBRARY_PATH=/usr/local/libgd/lib
	
	./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-pdo-mysql=/usr/local/mysql --with-gd --with-png-dir=/usr/local/libpng --with-jpeg-dir=/usr/local/jpeg --with-freetype-dir=/usr/local/freetype --with-xpm-dir=/usr/ --with-vpx-dir=/usr/local/libvpx/ --with-zlib-dir=/usr/local/zlib --with-t1lib=/usr/local/t1lib --with-iconv --enable-libxml --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --enable-opcache --enable-mbregex --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --enable-ctype
	
	make
	make install
	
	cp php.ini-development /usr/local/php/etc/php.ini
	
	rm -rf /etc/php.ini #删除系统自带配置文件
	
	ln -s /usr/local/php/etc/php.ini /etc/php.ini #添加软链接到 /etc目录
	
	cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf #拷贝模板文件为php-fpm配置文件
	
	ln -s /usr/local/php/etc/php-fpm.conf /etc/php-fpm.conf #添加软连接到 /etc目录
	
	cp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf
	
	vi /usr/local/php/etc/php-fpm.d/www.conf
	(修改
user = www
group = www
	)
	
	user = www #设置php-fpm运行账号为www  php7配置在/usr/local/php/etc/php-fpm.d/www.conf  php5在php-fpm.conf配置
	group = www #设置php-fpm运行组为www
	
	vi /usr/local/php/etc/php-fpm.conf #编辑保存退出
	
	pid = run/php-fpm.pid #取消前面的分号
	
	vi /usr/local/php/etc/php.ini
	
	找到：disable_functions =
	修改为：disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,getservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd, posix_getegid,posix_geteuid,posix_getgid, posix_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid, posix_getppid,posix_getpwnam,posix_getpwuid, posix_getrlimit, posix_getsid,posix_getuid,posix_isatty, posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid, posix_setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname
	#列出PHP可以禁用的函数，如果某些程序需要用到这个函数，可以删除，取消禁用。
	
	找到：;date.timezone =
	修改为：date.timezone = PRC #设置时区
	
	找到：expose_php = On
	修改为：expose_php = Off #禁止显示php版本的信息（可选）
	
	找到：short_open_tag = Off
	修改为：short_open_tag = ON #支持php短标签
	
	找到opcache.enable=0
	修改为opcache.enable=1 #php支持opcode缓存
	
	找到：;opcache.enable_cli=1 #php支持opcode缓存
	修改为：opcache.enable_cli=0
	
	在最后一行添加：zend_extension=opcache.so #开启opcode缓存功能
	
	设置 php-fpm开机启动
	cp ./sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm #拷贝php-fpm到启动目录
	chmod +x /etc/rc.d/init.d/php-fpm #添加执行权限
	chkconfig php-fpm on #设置开机启动
	
	vi /usr/local/nginx/conf/nginx.conf  #配置修改
	
配置Nginx支持PHP
	
	user www www; #首行user去掉注释,修改Nginx运行组为www www；必须与/usr/local/php/etc/php-fpm.conf中的user,group配置相同，否则php运行出错
	index index.html index.htm index.php; #添加index.php
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
		root           html;
		fastcgi_pass   127.0.0.1:9000;
		fastcgi_index  index.php;
		fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
		include        fastcgi_params;
	}
	#取消FastCGI server部分location的注释,注意fastcgi_param行的参数,改为$document_root$fastcgi_script_name,或者使用绝对路径
	/etc/init.d/nginx restart #重启nginx
	service php-fpm start #启动php-fpm
	
	添加php环境变量
	vi /etc/profile
		
	export PATH=$PATH:/usr/local/php/bin
		
	source /etc/profile
	
	查看php的所有支持模块
	php -m
	
测试
	cd /usr/local/nginx/html/ #进入nginx默认网站根目录
	vi index.php #新建index.php文件
	
	<?php
	phpinfo();
	
	在浏览器中打开服务器IP地址查看

	启动php失败：killall php-fpm（如果已启动占进程）
	
redis安装
	mkdir /usr/local/redis 
	cd /usr/local/src
	tar zxvf redis-3.2.3.tar.gz
	cd redis-3.2.3
	make
	make PREFIX=/usr/local/redis install
	
	配置redis
	cp ./redis.conf /usr/local/redis/
	vi /usr/local/redis/redis.conf
	暂时修改两项：
	daemonize yes #redis将以守护进程的方式运行，默认为no会暂用你的终端
	timeout 300​ #当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能

	设置自动启动
	vi /etc/init.d/redis
	把以下复制粘贴进入
############################################################################################
#!/bin/sh
#
# redis        Startup script for Redis Server
#
# chkconfig: - 80 12
# description: Redis is an open source, advanced key-value store.
#
# processname: redis-server
# config: /etc/redis.conf
# pidfile: /var/run/redis.pid
source /etc/init.d/functions
BIN="/usr/local/redis/bin"
CONFIG="/usr/local/redis/redis.conf"
PIDFILE="/var/run/redis.pid"
### Read configuration
[ -r "$SYSCONFIG" ] && source "$SYSCONFIG"
RETVAL=0
prog="redis-server"
desc="Redis Server"
start() {
		if [ -e $PIDFILE ];then
			 echo "$desc already running...."
			 exit 1
		fi
		echo -n $"Starting $desc: "
		daemon $BIN/$prog $CONFIG
		RETVAL=$?
		echo
		[ $RETVAL -eq 0 ] && touch /var/lock/subsys/$prog
		return $RETVAL
}
stop() {
		echo -n $"Stop $desc: "
		killproc $prog
		RETVAL=$?
		echo
		[ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$prog $PIDFILE
		return $RETVAL
}
restart() {
		stop
		start
}
case "$1" in
  start)
		start
		;;
  stop)
		stop
		;;
  restart)
		restart
		;;
  condrestart)
		[ -e /var/lock/subsys/$prog ] && restart
		RETVAL=$?
		;;
  status)
		status $prog
		RETVAL=$?
		;;
   *)
		echo $"Usage: $0 {start|stop|restart|condrestart|status}"
		RETVAL=1
esac
exit $RETVAL
############################################################################################

	chmod 755 /etc/init.d/redis #设置权限
	
	redis服务开关
	service redis start
	service redis stop
	
	测试
	cd /usr/local/redis/bin
	./redis-cli
	127.0.0.1:6379> set name liang
	OK
	127.0.0.1:6379> get name
	"liang"
	127.0.0.1:6379>
	
	php安装Redis扩展
	tar zxvf redis-3.0.0.tgz
	cd redis-3.0.0
	/usr/local/php/bin/phpize    #用phpize生成configure配置文件
	./configure --with-php-config=/usr/local/php/bin/php-config   #配置
	make
	make install
	
	安装完成之后，出现下面的安装路径
	Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012/
	
	配置php支持
	vi /usr/local/php/etc/php.ini  #编辑配置文件，在最后一行添加以下内容,且保存退出
	extension=redis.so
	
	php安装swoole扩展
	tar zxvf swoole-src-1.8.10-stable.tar.gz
	cd swoole-src-1.8.10-stable
	/usr/local/php/bin/phpize
	./configure
	make 
	make install
	Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20151012

	配置php支持
	vi /usr/local/php/etc/php.ini  #编辑配置文件，在最后一行添加以下内容,且保存退出
extension=swoole.so

extension=redis.so